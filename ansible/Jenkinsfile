#!/groovy

node {
    def work_dir = "ansible_configs"
    def inventory = "${INVENTORY}"
    def cjk_mail = "kevin@maildrop.cc"

    stage('Git Checkout') {
        checkout (
            [
            $class: 'GitSCM',
            userRemoteConfigs: [[url: "${CJK_GIT_URL}",credentialsId: "${CREDENTIALS_ID}" ]],
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${work_dir}"]],
            branches: [[name: "${BRANCH_NAME}"]]
            ]
        )

    }
    stage('Install Ansible') {
        try {
            
            println("Installing Ansible....")
            ansible_requirments()
        }
        catch(e){
            println(e)
        }
    }
    stage('Execute Playbook') {
        try {
            dir(work_dir){
                input id: 'ApproveAnsible', message: 'Ready to apply Config', ok:'proceed'
                proceed = true
                if (proceed) {
                    // Applying Static Inventory for Ansible Configuration
                    if(inventory == "static"){
                        println("Ansible Executes with static Inventory...")
                        play_exec()
                    }
                    // Applying Dynamic Inventory for Ansible Configuration
                    else if(inventory == "dynamic"){
                        sh('''
                            #!/bin/bash
                            sudo pip3 install -r ansible/requirements.txt
                            if [[ "${?}" -eq 0 ]];
                            then
                                export ANSIBLE_HOSTS=/ansible/inventory/ec2.py
                                export EC2_INI_PATH=/ansible/inventory/ec2.ini 
                                export ANSIBLE_CONFIG=ansible.cfg
                            else 
                                echo 'Inventory Setup Failed'
                                exit 1
                            fi
                        ''')
                        println("Ansible Executes with Dynamic Inventory")
                        play_exec_dynamic()
                    }
                }
                else
                    println("Approval Failed") 
            } 
        }
        catch(e){
            println(e)
            currentBuild.result = 'Failed'
            emailext (
                subject: 'Project Build Failed',
                body: 'Check here: ${env.BUILD_URL}',
                to: '${cjk_mail}'
            )
        }
        finally {
            deleteDir()
        }
    }
}

def ansible_requirments() {
    sh('''
        if [[ ! -d $JENKINS_HOME/project-tools ]] && mkdir $JENKINS_HOME/project-tools;
        then
            echo $PWD
            #!/bin/bash
            sudo yum install python3-pip -y
            if [[ "${?}" -eq 0 ]]
            then
                echo 'Python Pip Installed Successfully'
            else
                echo 'Python Pip Installation Failed'
            fi
            sudo amazon-linux-extras install ansible2
            ansible --version
            if [[ "${?}" -eq 0 ]];
            then
                echo 'Ansible Installation Completed'
            else
                echo 'Ansible Installation Failed'
                exit 1
            mkdir -p $JENKINS_HOME/project-tools
            fi
        fi
    ''')    
}

// Playbook Function Definition with static Inventory
def play_exec(){

    println("Playbook Execution starts !!!!!")

    ansiblePlaybook(
    playbook: 'ansible/site.yml',
    become: 'true',
    credentialsId: "${ANSIBLE_CRED}",
    inventory: 'ansible/hosts-dev'
    )
}

// Playbook Function Definition with Dynamic Inventory
def play_exec_dynamic(){

    println("Playbook Execution starts !!!!!")

    ansiblePlaybook(
    playbook: 'ansible/site.yml',
    become: 'true',
    credentialsId: "${ANSIBLE_CRED}",
    dynamicInventory : true
    )
}

// def dynamic_inv_setup(){
//     sh('''
//     echo 'Exporting the Environment Variables'
//     export ANSIBLE_HOSTS=/ansible/inventory/ec2.py
//     export EC2_INI_PATH=/ansible/inventory/ev2.ini 
//     export ANSIBLE_CONFIG=ansible.cfg
//     ''')
// }